diff --git a/.github/workflows/build-and-publish.yml b/.github/workflows/build-and-publish.yml
index d55e591..2241999 100644
--- a/.github/workflows/build-and-publish.yml
+++ b/.github/workflows/build-and-publish.yml
@@ -40,7 +40,8 @@ jobs:
       - name: Get commit hash
         id: get-commit-hash
         run: |
-          COMMIT_HASH=$(git rev-parse ${{ inputs.ref }})
+          # HEAD should be the same as inputs.ref since we checked out inputs.ref
+          COMMIT_HASH=$(git rev-parse HEAD)
           echo "Commit hash: $COMMIT_HASH"
           echo "commit_hash=$COMMIT_HASH" >> "$GITHUB_OUTPUT"
   build-and-publish:
diff --git a/.github/workflows/ci-{{app_name}}-infra-service.yml.jinja b/.github/workflows/ci-{{app_name}}-infra-service.yml.jinja
index b842ec9..8376cf1 100644
--- a/.github/workflows/ci-{{app_name}}-infra-service.yml.jinja
+++ b/.github/workflows/ci-{{app_name}}-infra-service.yml.jinja
@@ -16,11 +16,26 @@ on:
   #     - .github/workflows/ci-{{app_name}}-infra-service.yml
   {% endif %}
   workflow_dispatch:
+    inputs:
+      version:
+        required: true
+        default: "main"
+        description: Tag or branch or SHA to test
 
 jobs:
+  # `make infra-test-service` will build and publish the release itself, but
+  #  doing it explicitly with the re-usable workflow helps avoid race conditions
+  build-and-publish:
+    name: Build
+    uses: ./.github/workflows/build-and-publish.yml
+    with:
+      app_name: {{ app_name }}
+      ref: ${{ inputs.version || github.ref }}
+
   infra-test-e2e:
     name: Test service
     runs-on: ubuntu-latest
+    needs: [build-and-publish]
 
     permissions:
       contents: read
@@ -28,6 +43,8 @@ jobs:
 
     steps:
       - uses: actions/checkout@v4
+        with:
+          ref: ${{ inputs.version || github.ref }}
 
       - name: Set up Terraform
         uses: ./.github/actions/setup-terraform
diff --git a/infra/test/infra_test.go b/infra/test/infra_test.go
index e3fb30b..6b513c4 100644
--- a/infra/test/infra_test.go
+++ b/infra/test/infra_test.go
@@ -1,3 +1,10 @@
+// Package test contains infrastructure tests for testing the service layer.
+// Prerequisite: Ensure the container image for the current git hash has
+// been built and published to the container image repository.
+// When running in CI, use the build-and-publish workflow.
+// When running locally, run `make release-build` followed by
+// `make release-publish`.
+
 package test
 
 import (
@@ -19,8 +26,6 @@ var workspaceName = fmt.Sprintf("t-%s", uniqueId)
 var testAppName = os.Getenv("APP_NAME")
 
 func TestService(t *testing.T) {
-	BuildAndPublish(t)
-
 	imageTag := shell.RunCommandAndGetOutput(t, shell.Command{
 		Command:    "git",
 		Args:       []string{"rev-parse", "HEAD"},
@@ -53,36 +58,6 @@ func TestService(t *testing.T) {
 	RunEndToEndTests(t, terraformOptions)
 }
 
-func BuildAndPublish(t *testing.T) {
-	fmt.Println("::group::Initialize build-repository module")
-	// terratest currently does not support passing a file as the -backend-config option
-	// so we need to manually call terraform rather than using terraform.Init
-	// see https://github.com/gruntwork-io/terratest/issues/517
-	// it looks like this PR would add functionality for this: https://github.com/gruntwork-io/terratest/pull/558
-	// after which we add BackendConfig: []string{"dev.s3.tfbackend": terraform.KeyOnly} to terraformOptions
-	// and replace the call to terraform.RunTerraformCommand with terraform.Init
-	TerraformInit(t, &terraform.Options{
-		TerraformDir: fmt.Sprintf("../%s/build-repository/", testAppName),
-	}, "shared.s3.tfbackend")
-	fmt.Println("::endgroup::")
-
-	fmt.Println("::group::Build release")
-	shell.RunCommand(t, shell.Command{
-		Command:    "make",
-		Args:       []string{"release-build", fmt.Sprintf("APP_NAME=%s", testAppName)},
-		WorkingDir: "../../",
-	})
-	fmt.Println("::endgroup::")
-
-	fmt.Println("::group::Publish release")
-	shell.RunCommand(t, shell.Command{
-		Command:    "make",
-		Args:       []string{"release-publish", fmt.Sprintf("APP_NAME=%s", testAppName)},
-		WorkingDir: "../../",
-	})
-	fmt.Println("::endgroup::")
-}
-
 func WaitForServiceToBeStable(t *testing.T, workspaceName string) {
 	fmt.Println("::group::Wait for service to be stable")
 	appName := testAppName
