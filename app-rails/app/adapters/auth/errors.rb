  module Auth
    module Errors
      class BaseAuthError < StandardError
        def message
          error_key = self.class.name.demodulize.underscore
          I18n.t("auth.errors.messages.#{error_key}", default: self.class.name.demodulize)
        end
      end

      # User tried to use an expired verification code
      class CodeExpired < BaseAuthError
      end

      # 6-digit verification code entered by user does not match the one sent to their email
      class CodeMismatch < BaseAuthError
      end

      # User tried to login with invalid email or password.
      # We intentionally do not distinguish between the two in order to prevent enumeration attacks.
      class InvalidCredentials < BaseAuthError
      end

      class InvalidPasswordFormat < BaseAuthError
      end

      # Fallback error for when we don't know what went wrong, so we just show the error
      # message from the provider
      class ProviderError < BaseAuthError
        def initialize(message)
          @message = message
        end

        def message
          @message
        end
      end

      # MFA authenticator code entered by user does not match the one generated by their device,
      # which means it may have expired or the user entered it incorrectly
      class InvalidSoftwareToken < BaseAuthError
      end

      # User tried to register with, or change their email to, an email that already exists
      class UsernameExists < BaseAuthError
      end

      # User tried to do something that requires a verified email, but their email is not verified
      class UserNotConfirmed < BaseAuthError
      end
    end
  end
