#!/bin/bash
# -----------------------------------------------------------------------------
# Run an application command using the application image
#
# Optional parameters:
#   --environment_variables - a JSON list of environment variables to add to the
#     the container. Each environment variable is an object with the "name" key
#     specifying the name of the environment variable and the "value" key
#     specifying the value of the environment variable.
#     e.g. '[{ "name" : "DB_USER", "value" : "migrator" }]'
#   --task_role_arn - the IAM role ARN that the task should assume. Overrides the
#     task role specified in the task definition.
#
# Positional parameters:
#   app_name (required) - the name of subdirectory of /infra that holds the
#     application's infrastructure code.
#   environment (required) - the name of the application environment (e.g. dev,
#     staging, prod)
#   command (required) - a JSON list representing the command to run
#     e.g. To run the command `db-migrate-up` with no arguments, set
#     command='["db-migrate-up"]'
#     e.g. To run the command `echo "Hello, world"` set
#     command='["echo", "Hello, world"]')
# -----------------------------------------------------------------------------
set -euo pipefail

# Parse optional parameters
environment_variables=""
task_role_arn=""
while :; do
  case "$1" in
    --environment-variables)
      environment_variables="$2"
      shift 2
      ;;
    --task-role-arn)
      task_role_arn="$2"
      shift 2
      ;;
    *)
      break
      ;;
  esac
done

app_name="$1"
environment="$2"
command="$3"

echo "==============="
echo "Running command"
echo "==============="
echo "Input parameters"
echo "  app_name=${app_name}"
echo "  environment=${environment}"
echo "  command=${command}"
echo "  environment_variables=${environment_variables:-}"
echo "  task_role_arn=${task_role_arn:-}"
echo

# Use the same cluster, task definition, and network configuration that the application service uses
cluster_name="$(terraform -chdir="infra/${app_name}/service" output -raw service_cluster_name)"
service_name="$(terraform -chdir="infra/${app_name}/service" output -raw service_name)"

# Get the log group and log stream prefix so that we can print out the ECS task's logs after running the task
log_group="$(terraform -chdir="infra/${app_name}/service" output -raw application_log_group)"
log_stream_prefix="$(terraform -chdir="infra/${app_name}/service" output -raw application_log_stream_prefix)"

service_task_definition_arn="$(aws ecs describe-services --no-cli-pager --cluster "${cluster_name}" --services "${service_name}" --query "services[0].taskDefinition" --output text)"
task_definition_family="$(aws ecs describe-task-definition --no-cli-pager --task-definition "${service_task_definition_arn}" --query "taskDefinition.family" --
