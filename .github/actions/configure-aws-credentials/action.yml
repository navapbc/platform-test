name: 'Configure AWS Credentials'
description: 'Configure AWS Credentials so that the GitHub Actions workflow can access AWS resources. The account, role, and region are based on the account_names configuration in app-config'
inputs:
  app_name:
    description: 'Name of application folder under /infra'
    required: true
  environment:
    description: 'Name of environment (dev, staging, prod) that AWS resources live in, or "shared" for resources that are shared across environments'
    required: true
runs:
  using: "composite"
  steps:
    - run: |
        terraform -chdir=infra/project-config init
        GITHUB_ACTIONS_ROLE_NAME=$(terraform -chdir=infra/project-config output -raw github_actions_role_name)
        AWS_REGION=$(terraform -chdir=infra/project-config output -raw default_region)

        terraform -chdir=infra/${{ inputs.app_name }}/app-config init
        terraform -chdir=infra/${{ inputs.app_name }}/app-config refresh
        ACCOUNT_NAME=$(terraform -chdir=infra/${{ inputs.app_name }}/app-config output -json account_names | jq .${{ inputs.environment }})

        # Get the account id associated with the account name
        # by listing files in the infra/accounts folder,
        # filtering to files that start with the account name followed by a period,
        # filtering to files that end in s3.tfbackend
        # (there should be one file that looks like <ACCOUNT_NAME>.<ACCOUNT_ID>.s3.tfbackend),
        # and then stripping the suffix and prefix to just end up with <ACCOUNT_ID>.
        ACCOUNT_ID=$(ls -1 infra/accounts | grep "$ACCOUNT_NAME." | grep s3.tfbackend | sed 's/.s3.tfbackend//' | sed "s/$ACCOUNT_NAME.//")

        AWS_ROLE_TO_ASSUME=arn:aws:iam::$ACCOUNT_ID:role/$GITHUB_ACTIONS_ROLE_NAME

        echo "AWS_ROLE_TO_ASSUME=$AWS_ROLE_TO_ASSUME" >> "$GITHUB_ENV"
        echo "AWS_REGION=$AWS_REGION" >> "$GITHUB_ENV"
      shell: bash
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
        aws-region: ${{ env.AWS_REGION }}
